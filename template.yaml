AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: >
  eventbridge-integration-solution-auth0-visualization

  (qs-1qpmal5d5)
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30

Metadata:
  AWS::ServerlessRepo::Application:
    Name: Amazon-EventBridge-Integration-Solution-Auth0-Visualization
    Description: This application demonstrates an integration with Auth0 for Amazon EventBridge SaaS Partner Integrations
    Author: AWS Quick Start
    LicenseUrl: LICENSE
    ReadmeUrl: README.md
    Labels: ['amazon', 'eventbridge', 'integration', 'solution', 'aws', 'lambda', 'auth0', 's3']
    HomePageUrl: https://aws.amazon.com/quickstart/eventbridge/auth0-visualization/
    SemanticVersion: 0.1.5
    SourceCodeUrl: https://github.com/aws-quickstart/eventbridge-integration-solution-auth0-visualization
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Amazon EventBridge Integration Solution
      Parameters:
      - EventSourceName
    - Label:
        default: Amazon S3
      Parameters:
      - BucketName
    - Label:
        default: Amazon Kinesis Data Firehose
      Parameters:
      - DeliveryStreamName
    ParameterLabels:
      EventSourceName:
        default: Event Source Name
      BucketName:
        default: Bucket Name
      DeliveryStreamName:
        default: Delivery Stream Name

Parameters:
  EventSourceName:
    Type: String
    AllowedPattern: aws\.partner(/[\.\-_A-Za-z0-9]+){2,}
    MinLength: 18
    MaxLength: 256
    Description: Name of the Auth0 Partner Event Source to associate with an Event Bus. For example, aws.partner/auth0.com/slug-uuid/auth0.logs
  BucketName:
    Type: String
    Default: ''
    AllowedPattern: '[a-zA-Z0-9.-]*'
    MaxLength: 63
    Description: Name of the Amazon S3 Bucket to create. Leave blank for an automatically generated name.
  DeliveryStreamName:
    Type: String
    AllowedPattern: '[a-zA-Z0-9_.-]+'
    MinLength: 1
    MaxLength: 64
    Description: Name of the Amazon Kinesis Data Firehose Delivery Stream to create

Conditions:
  AutoGenerateBucketName:
    !Equals [ !Ref BucketName, '' ]

Resources:
  EventBridgeEventBus:
    Type: AWS::Events::EventBus
    Properties:
      EventSourceName: !Ref EventSourceName
      Name: !Ref EventSourceName

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      BucketName:
        !If [ AutoGenerateBucketName, !Ref 'AWS::NoValue', !Ref BucketName ]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  EventBridgeKinesisDataFirehoseTargetRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - events.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: eventbridge-to-kinesis-firehose-policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - firehose:PutRecord
            Resource:
            - !GetAtt KinesisDataFirehoseDeliveryStream.Arn

  KinesisDataFirehoseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - firehose.amazonaws.com
          Action:
          - sts:AssumeRole
          Condition:
            StringEquals:
              sts:ExternalId: !Ref AWS::AccountId
      Path: /
      Policies:
      - PolicyName: kinesis-firehose-policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - s3:AbortMultipartUpload
            - s3:GetBucketLocation
            - s3:GetObject
            - s3:ListBucket
            - s3:ListBucketMultipartUploads
            - s3:PutObject
            Resource:
            - !Sub ${S3Bucket.Arn}
            - !Sub ${S3Bucket.Arn}/*

  KinesisDataFirehoseDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Ref DeliveryStreamName
      DeliveryStreamType: DirectPut
      S3DestinationConfiguration:
        BucketARN: !GetAtt S3Bucket.Arn
        RoleARN: !GetAtt KinesisDataFirehoseRole.Arn

  SuccessfulSignInRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Auth0 User Successfully signed in
      EventBusName: !Ref EventBridgeEventBus
      EventPattern:
        account:
        - !Sub ${AWS::AccountId}
        detail:
          data:
            type:
            - s
      Targets:
      - Arn: !GetAtt KinesisDataFirehoseDeliveryStream.Arn
        Id: SignInSuccessV1
        RoleArn: !GetAtt EventBridgeKinesisDataFirehoseTargetRole.Arn

  SuccessfulSignUpRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Auth0 User Successfully signed up
      EventBusName: !Ref EventBridgeEventBus
      EventPattern:
        account:
        - !Sub ${AWS::AccountId}
        detail:
          data:
            type:
            - ss
      Targets:
      - Arn: !GetAtt KinesisDataFirehoseDeliveryStream.Arn
        Id: SignUpSuccessV1
        RoleArn: !GetAtt EventBridgeKinesisDataFirehoseTargetRole.Arn

  SuccessfulSignOutRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Auth0 User Successfully signed out
      EventBusName: !Ref EventBridgeEventBus
      EventPattern:
        account:
        - !Sub ${AWS::AccountId}
        detail:
          data:
            type:
            - slo
      Targets:
      - Arn: !GetAtt KinesisDataFirehoseDeliveryStream.Arn
        Id: SignOutSuccessV1
        RoleArn: !GetAtt EventBridgeKinesisDataFirehoseTargetRole.Arn

  FailedSignInRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Auth0 User Failed sign in
      EventBusName: !Ref EventBridgeEventBus
      EventPattern:
        account:
        - !Sub ${AWS::AccountId}
        detail:
          data:
            type:
            - fp
            - f
            - fu
      Targets:
      - Arn: !GetAtt KinesisDataFirehoseDeliveryStream.Arn
        Id: SignInFailV1
        RoleArn: !GetAtt EventBridgeKinesisDataFirehoseTargetRole.Arn


Outputs:
  EventBridgeEventBus:
    Description: Event Bus Arn
    Value: !GetAtt EventBridgeEventBus.Arn
  EventBridgeKinesisDataFirehoseTargetRole:
    Description: EventBridge Kinesis Data Firehose Target IAM Role
    Value: !GetAtt EventBridgeKinesisDataFirehoseTargetRole.Arn
  SuccessfulSignInRule:
    Description: SuccessfulSignIn Rule ARN
    Value: !GetAtt SuccessfulSignInRule.Arn
  SuccessfulSignUpRule:
    Description: SuccessfulSignUp Rule ARN
    Value: !GetAtt SuccessfulSignUpRule.Arn
  SuccessfulSignOutRule:
    Description: SuccessfulSignOut Rule ARN
    Value: !GetAtt SuccessfulSignOutRule.Arn
  FailedSignInRule:
    Description: FailedSignIn Rule ARN
    Value: !GetAtt FailedSignInRule.Arn
  KinesisDataFirehoseDeliveryStream:
    Description: KinesisDataFirehoseDeliveryStream Arn
    Value: !GetAtt KinesisDataFirehoseDeliveryStream.Arn
  KinesisDataFirehoseRole:
    Description: Kinesis Data Firehose Delivery Stream IAM Role
    Value: !GetAtt KinesisDataFirehoseRole.Arn
  S3Bucket:
    Description: S3 Bucket ARN
    Value: !GetAtt S3Bucket.Arn
